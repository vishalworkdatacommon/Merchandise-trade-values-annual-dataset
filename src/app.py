import pandas as pd
import gradio as gr
import os
from transformers import pipeline

# --- 1. Initialize the Generative AI Model ---
# We use a smaller, efficient model suitable for free-tier deployment.
# This will be loaded once when the application starts.
print("Initializing Generative AI pipeline...")
try:
    generator = pipeline('text-generation', model='google/gemma-2b-it', device_map="auto")
    print("Generative AI pipeline loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}. Using a placeholder function.")
    # In case of an error (e.g., no internet), use a simple placeholder
    def generator(prompt, **kwargs):
        return [{"generated_text": "Generative AI model could not be loaded. This is a placeholder response."}]

# --- 2. Load Forecast Data ---
def load_all_forecasts(sarimax_path, lstm_path):
    """Loads both SARIMAX and LSTM forecast data."""
    try:
        sarimax_df = pd.read_csv(sarimax_path, index_col='Year', parse_dates=True)
        lstm_df = pd.read_csv(lstm_path, index_col='Year', parse_dates=True)
        combined_df = sarimax_df[['mean']].rename(columns={'mean': 'SARIMAX_Forecast'})
        combined_df['LSTM_Forecast'] = lstm_df['mean']
        return combined_df
    except FileNotFoundError as e:
        raise FileNotFoundError(f"Error loading forecast files: {e}. Please run forecasting scripts first.")

# --- 3. Define Core Logic ---
def get_trade_forecast(year):
    """
    Retrieves forecasts and uses a Gen AI model to generate a dynamic analysis.
    """
    if not year:
        return "Please enter a year to get a forecast."
        
    try:
        year = int(year)
        target_date = pd.to_datetime(f"{year}-01-01")
        
        if target_date in forecast_df.index:
            data = forecast_df.loc[target_date]
            sarimax_val = data['SARIMAX_Forecast'] / 1e6
            lstm_val = data['LSTM_Forecast'] / 1e6

            # --- 4. Create a Dynamic Prompt for the LLM ---
            prompt = f"""
            <start_of_turn>user
            You are an expert economic analyst. You have been given two forecasts for China's total merchandise exports for the year {year}.

            - **Model 1 (SARIMAX, a statistical model):** ${sarimax_val:.2f} trillion USD
            - **Model 2 (LSTM, a deep learning model):** ${lstm_val:.2f} trillion USD

            Please provide a brief, insightful analysis for a business executive. Compare the two forecasts, explain briefly what the difference in models means, and comment on the overall economic outlook based on these numbers. Keep the tone professional and concise.
            <end_of_turn>
            <start_of_turn>model
            "

            print(f"\nGenerating analysis for year {year}...")
            # --- 5. Call the Generative AI Model ---
            outputs = generator(
                prompt,
                max_new_tokens=256,
                do_sample=True,
                temperature=0.7,
                top_k=50,
                top_p=0.95
            )
            generated_text = outputs[0]['generated_text'].split('<start_of_turn>model\n')[-1]
            print("Analysis generated successfully.")
            
            return generated_text

        else:
            min_year, max_year = forecast_df.index.min().year, forecast_df.index.max().year
            return f"Sorry, I don't have a forecast for {year}. Please choose a year between {min_year} and {max_year}."

    except (ValueError, TypeError):
        return "Invalid input. Please enter a valid year (e.g., 2025)."

# --- 6. Setup and Launch the App ---
if __name__ == "__main__":
    sarimax_csv_path = os.path.join('data', 'china_exports_forecast.csv')
    lstm_csv_path = os.path.join('data', 'china_exports_forecast_lstm.csv')
    
    forecast_df = load_all_forecasts(sarimax_csv_path, lstm_csv_path)

    iface = gr.Interface(
        fn=get_trade_forecast,
        inputs=gr.Textbox(label="Enter a Year (e.g., 2025)", placeholder="2025"),
        outputs=gr.Markdown(label="Generative AI Forecast Analysis"),
        title="Gen AI-Powered Global Trade Forecaster",
        description="Compare forecasts from statistical and deep learning models, with a dynamic analysis generated by an LLM.",
        article="Built with Python, Statsmodels, TensorFlow, Gradio, and Hugging Face Transformers.",
        allow_flagging='never'
    )

    print("Launching Gradio web application...")
    iface.launch(server_name="0.0.0.0", server_port=7860)